{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHlSLCBuDYVqAZ7JexQsdn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fahmithabasheer/fahmitha_Meta_Scifor_Technology/blob/main/PYTHON%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. find the sum of elements in the list"
      ],
      "metadata": {
        "id": "-PXcme0-H1SJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v29AFy4mHvA9",
        "outputId": "9dc16f18-048d-431c-f238-994508b881e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ],
      "source": [
        "list=[1,2,3,4,5]\n",
        "total_sum=sum(list)\n",
        "print(total_sum)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. largest element in the list"
      ],
      "metadata": {
        "id": "_LMN8t6OIm6a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list = [1, 2, 3, 4, 5]\n",
        "largest_element = max(list)\n",
        "print(largest_element)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4ezT4SmI0Lf",
        "outputId": "2abd3afe-408b-4087-958b-c57673e3973e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Remove duplicates in a list"
      ],
      "metadata": {
        "id": "ngtSp91YJEvQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list=[1,2,2,3,4,4,5]\n",
        "unique_list=[]\n",
        "for i in list:\n",
        "  if i not in unique_list:\n",
        "    unique_list.append(i)\n",
        "print(unique_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_HBa7Qc6JGCA",
        "outputId": "afcf0c81-2f5d-457b-a321-064bab96ffd2"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. check if all elements in a list are unique\n",
        "\n"
      ],
      "metadata": {
        "id": "K5G5v5C2JGag"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def are_elements_unique(list_):\n",
        "  return len(list_) == len(set(list_))\n",
        "\n",
        "list_ = [1, 2, 3, 4, 5]\n",
        "if are_elements_unique(list_):\n",
        "  print(\"All elements in the list are unique\")\n",
        "else:\n",
        "  print(\"Not all elements in the list are unique\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KJ_ZjfXbJG04",
        "outputId": "814cbdfd-80df-4261-d715-9538cc87e201"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All elements in the list are unique\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. program to reverse list"
      ],
      "metadata": {
        "id": "fZ7C5o7lJHHb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list_ = [1, 2, 3, 4, 5]\n",
        "reversed_list = list_[::-1]\n",
        "print(reversed_list)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7KNUJzwrJHb-",
        "outputId": "a66e224a-203b-4d45-c2c9-c1043af2efb7"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 4, 3, 2, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. count no. of odd and even numbers in a list"
      ],
      "metadata": {
        "id": "Qji0Jef1JHzF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def count_odd_even(list_):\n",
        "  even_count = 0\n",
        "  odd_count = 0\n",
        "  for num in list_:\n",
        "    if num % 2 == 0:\n",
        "      even_count += 1\n",
        "    else:\n",
        "      odd_count += 1\n",
        "  return even_count, odd_count\n",
        "\n",
        "list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "even_count, odd_count = count_odd_even(list_)\n",
        "print(\"Number of even numbers:\", even_count)\n",
        "print(\"Number of odd numbers:\", odd_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2PTn3KPqJIKS",
        "outputId": "f078b09c-a705-462b-accf-9ba5eda65a19"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of even numbers: 4\n",
            "Number of odd numbers: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. check if a list is subset of another list"
      ],
      "metadata": {
        "id": "JWYXMbu7JIiO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def is_subset(list1, list2):\n",
        "  return set(list1).issubset(set(list2))\n",
        "\n",
        "list1 = [1, 2, 3]\n",
        "list2 = [1, 2, 3, 4, 5]\n",
        "\n",
        "if is_subset(list1, list2):\n",
        "  print(\"list1 is a subset of list2\")\n",
        "else:\n",
        "  print(\"list1 is not a subset of list2\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thcVLV1nJI1_",
        "outputId": "246aea82-f159-4303-aa03-f94bea2f5c42"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "list1 is a subset of list2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. max difference between two consecutive elements in a list"
      ],
      "metadata": {
        "id": "fJmbdEuoJJJD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def max_consecutive_difference(list_):\n",
        "  if len(list_) < 2:\n",
        "    return 0\n",
        "  max_diff = 0\n",
        "  for i in range(len(list_) - 1):\n",
        "    diff = abs(list_[i+1] - list_[i])\n",
        "    if diff > max_diff:\n",
        "      max_diff = diff\n",
        "  return max_diff\n",
        "\n",
        "list_ = [1, 2, 3, 4, 5]\n",
        "max_diff = max_consecutive_difference(list_)\n",
        "print(\"Maximum difference between two consecutive elements:\", max_diff)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VGDzHzyqJJbK",
        "outputId": "be38b5c4-1e0c-4995-adde-4c941e438368"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum difference between two consecutive elements: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. merge multiple dictionaries"
      ],
      "metadata": {
        "id": "C5qjzRFHJJtA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: merge multiple dictionaries\n",
        "\n",
        "def merge_dictionaries(dict_list):\n",
        "  merged_dict = {}\n",
        "  for dict_ in dict_list:\n",
        "    merged_dict.update(dict_)\n",
        "  return merged_dict\n",
        "\n",
        "dict1 = {'a': 1, 'b': 2}\n",
        "dict2 = {'c': 3, 'd': 4}\n",
        "dict3 = {'e': 5, 'f': 6}\n",
        "\n",
        "dict_list = [dict1, dict2, dict3]\n",
        "merged_dict = merge_dictionaries(dict_list)\n",
        "print(\"Merged dictionary:\", merged_dict)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JUkuBBE4JJ-K",
        "outputId": "f1a622c4-063a-4b36-f555-e8e4878cc02e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Merged dictionary: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. find words frequency in a sentence"
      ],
      "metadata": {
        "id": "Grpn5T3QJKO1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sentence = \"This is a sentence to find the frequency of words in a sentence.\"\n",
        "words = sentence.split()\n",
        "frequency = {}\n",
        "for word in words:\n",
        "  if word in frequency:\n",
        "    frequency[word] += 1\n",
        "  else:\n",
        "    frequency[word] = 1\n",
        "print(frequency)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ndKBd4xqJKox",
        "outputId": "52996b91-26d1-44af-d53d-7e5a7342b65e"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'This': 1, 'is': 1, 'a': 2, 'sentence': 1, 'to': 1, 'find': 1, 'the': 1, 'frequency': 1, 'of': 1, 'words': 1, 'in': 1, 'sentence.': 1}\n"
          ]
        }
      ]
    }
  ]
}